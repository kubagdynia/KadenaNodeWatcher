pipeline {
    agent none
    environment {
        DOCKER_IMAGE = "devkaptain/kadenanodewatcher-api:v${env.BUILD_NUMBER}"
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        GIT_REPOSITORY = 'https://github.com/kubagdynia/KadenaNodeWatcher'
    }
    stages {
        stage('Checkout SCM') {
            agent {
                label 'DOTNET8'
            }
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: GIT_REPOSITORY]]
                ])
            }
        }
        stage('Restore Projects') {
            agent {
                label 'DOTNET8'
            }
            steps {
                script {
                    sh 'dotnet restore --verbosity normal'
                }
            }
        }
        stage('Build Projects') {
            agent {
                label 'DOTNET8'
            }
            steps {
                script {
                    try {
                        sh 'dotnet build'
                    } finally {
                        archiveArtifacts artifacts: 'KadenaNodeWatcher.Api/*.*', allowEmptyArchive: true
                    }
                }
            }
        }
        stage('Test Projects') {
            agent {
                label 'DOTNET8'
            }
            steps {
                sh 'dotnet test --no-build --verbosity normal'
            }
        }
        stage('Build Docker Image') {
            agent {
                label 'docker'
            }
            steps {
                script {
                    // Build Docker Image
                    dockerImage = docker.build(DOCKER_IMAGE, '-f kadenanodewatcher-api-Dockerfile .')
                }
            }
        }
        stage('Push Docker Image') {
            agent {
                label 'docker'
            }
            steps {
                script {
                    docker.withRegistry(DOCKER_REGISTRY, 'dockerhubcreds') {
                        // Add Docker Image Tag
                        app.tag("latest")
                        
                        // Push Docker Image
                        dockerImage.push()
                    }
                }
            }
        }
    }
    post {
        always {
            node(label: 'docker || DOTNET8') {
                cleanWs()
            }
        }
    }
}